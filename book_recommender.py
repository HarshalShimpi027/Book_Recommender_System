# -*- coding: utf-8 -*-
"""Book_Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A_tuWaSDioajJRmcm1VzfDxL9KWy78wf
"""

import numpy as np
import pandas as pd

books = pd.read_csv("/content/Books.csv")
ratings = pd.read_csv("/content/Ratings.csv")
users = pd.read_csv("/content/Users.csv")

books.head()

ratings.head()

users.head()

print(books.shape)
print(ratings.shape)
print(users.shape)

books.isnull().sum()

ratings.isnull().sum()

users.isnull().sum()

books.duplicated().sum()

users.duplicated().sum()

ratings.duplicated().sum()

"""##Popularity Based Recommender System"""

ratings

ratings_with_name = ratings.merge(books, on = 'ISBN')

ratings_with_name

num_rating_df = ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns = {'Book-Rating':'num-ratings'}, inplace = True)
num_rating_df

avg_rating_df = ratings_with_name.groupby('Book-Title').mean()['Book-Rating'].reset_index()
avg_rating_df.rename(columns = {'Book-Rating':'avg-rating'}, inplace = True)
avg_rating_df

popular_df = num_rating_df.merge(avg_rating_df, on = 'Book-Title')
popular_df

popular_df = popular_df[popular_df['num-ratings']>250].sort_values('avg-rating',ascending= False ).head(50)

popular_df

popular_df = popular_df.merge(books, on = 'Book-Title')

popular_df = popular_df.merge(books, on = 'Book-Title').drop_duplicates('Book-Title')[['Book-Title','Book-Author','Image-URL-M','num-ratings','avg-rating']]

popular_df

popular_df['Image-URL-M'][0]

"""##Collaborative Filter Based Recomender System"""

ratings_with_name

x = ratings_with_name.groupby('User-ID').count()['Book-Rating']>200
Educated = x[x].index

filtered_rating = ratings_with_name[ratings_with_name['User-ID'].isin(Educated)]

y = filtered_rating.groupby('Book-Title').count()['Book-Rating'] >= 50
famous_books = y[y].index
famous_books

final_rating = filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]
final_rating

final_rating.drop_duplicates()

pt = final_rating.pivot_table(index = 'Book-Title', columns = 'User-ID', values = 'Book-Rating')

pt.shape

pt.fillna(0,inplace=True)

pt

from sklearn.metrics.pairwise import cosine_similarity

similarity_score = cosine_similarity(pt)

similarity_score.shape

index = np.where(pt.index == 'Zoya')[0][0]

sorted(list(enumerate(similarity_score[0])),key=lambda x:x[1], reverse =True)[1:6]

def recommend(book_name): #index fetch
  index = np.where(pt.index == book_name)[0][0]
  similar_items = sorted(list(enumerate(similarity_score[index])),key=lambda x:x[1], reverse =True)[1:6]

  data = []
  for i in similar_items:
    item = []
    temp_df = books[books['Book-Title'] == pt.index[i[0]]]
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Book-Title'].values))
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Book-Author'].values))
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Image-URL-M'].values))

    data.append(item)

  return data

recommend('Message in a Bottle')

recommend('1984')

pt.index[54]

import pickle
pickle.dump(popular_df,open('popular.pkl','wb'))

popular_df['Image-URL-M'][0]

pickle.dump(pt,open('pt.pkl','wb'))
pickle.dump(books,open('books.pkl','wb'))
pickle.dump(similarity_score,open('similarity_score.pkl','wb'))